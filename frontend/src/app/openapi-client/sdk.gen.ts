// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from "@hey-api/client-axios";
import type {
  RegisterData,
  RegisterError,
  RegisterResponse,
  LoginData,
  LoginError,
  LoginResponse,
  LoginGoogleData,
  LoginGoogleError,
  LoginGoogleResponse,
  CallbackGoogleData,
  CallbackGoogleError,
  CallbackGoogleResponse,
  RefreshError,
  RefreshResponse,
  LogoutError,
  LogoutResponse,
  MeError,
  MeResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Register
 */
export const register = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RegisterData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
    ...options,
    url: "/auth/register",
  });
};

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
    ...options,
    url: "/auth/login",
  });
};

/**
 * Login Google
 */
export const loginGoogle = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<LoginGoogleData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<LoginGoogleResponse, LoginGoogleError, ThrowOnError>({
    ...options,
    url: "/auth/login/google",
  });
};

/**
 * Callback Google
 */
export const callbackGoogle = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<CallbackGoogleData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<CallbackGoogleResponse, CallbackGoogleError, ThrowOnError>(
    {
      ...options,
      url: "/auth/callback/google",
    },
  );
};

/**
 * Refresh
 */
export const refresh = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RefreshResponse, RefreshError, ThrowOnError>({
    ...options,
    url: "/auth/refresh",
  });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
    ...options,
    url: "/auth/logout",
  });
};

/**
 * Me
 */
export const me = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<MeResponse, MeError, ThrowOnError>({
    ...options,
    url: "/auth/me",
  });
};

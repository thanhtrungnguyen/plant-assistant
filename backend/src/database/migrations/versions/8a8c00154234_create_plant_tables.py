"""create plant tables

Revision ID: 8a8c00154234
Revises:
Create Date: 2025-08-14 16:52:21.816549

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "8a8c00154234"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "issue_catalog",
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("code", name=op.f("pk__issue_catalog")),
    )
    op.create_table(
        "species",
        sa.Column("scientific_name", sa.String(), nullable=False),
        sa.Column("common_name", sa.String(), nullable=True),
        sa.Column("synonyms", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("pet_safe", sa.Boolean(), nullable=True),
        sa.Column(
            "default_care_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__species")),
        sa.UniqueConstraint("scientific_name", name="uq_species_scientific_name"),
    )
    op.create_index(
        op.f("ix__species__common_name"), "species", ["common_name"], unique=False
    )
    op.create_index(
        op.f("ix__species__scientific_name"),
        "species",
        ["scientific_name"],
        unique=False,
    )
    op.create_index("ix_species_common_name", "species", ["common_name"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("email_verified", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__users")),
    )
    op.create_index(op.f("ix__users__email"), "users", ["email"], unique=True)
    op.create_table(
        "vector_items",
        sa.Column("collection", sa.String(length=50), nullable=False),
        sa.Column("external_vector_id", sa.String(length=100), nullable=False),
        sa.Column("source_kind", sa.String(length=30), nullable=True),
        sa.Column("source_id", sa.Integer(), nullable=True),
        sa.Column(
            "vector_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__vector_items")),
        sa.UniqueConstraint(
            "collection", "external_vector_id", name="uq_vector_collection_external_id"
        ),
    )
    op.create_index(
        "ix_vector_items_collection", "vector_items", ["collection"], unique=False
    )
    op.create_table(
        "audit_consent_logs",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("consent_type", sa.String(length=40), nullable=False),
        sa.Column("granted_at", sa.DateTime(), nullable=False),
        sa.Column("revoked_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__audit_consent_logs__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__audit_consent_logs")),
    )
    op.create_table(
        "feedback",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("target_kind", sa.String(length=30), nullable=False),
        sa.Column("target_id", sa.Integer(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__feedback__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__feedback")),
    )
    op.create_index("ix_feedback_user_id", "feedback", ["user_id"], unique=False)
    op.create_table(
        "oauth_accounts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("provider", sa.String(length=50), nullable=False),
        sa.Column("provider_sub", sa.String(length=191), nullable=False),
        sa.Column("email_at_provider", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__oauth_accounts__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__oauth_accounts")),
        sa.UniqueConstraint("provider", "provider_sub", name="uq_oauth_provider_sub"),
    )
    op.create_index(
        op.f("ix__oauth_accounts__user_id"), "oauth_accounts", ["user_id"], unique=False
    )
    op.create_table(
        "password_credentials",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("password_set_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__password_credentials__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", name=op.f("pk__password_credentials")),
    )
    op.create_table(
        "password_reset_tokens",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("token_hash", sa.String(length=64), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("used_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("requested_ip", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__password_reset_tokens__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__password_reset_tokens")),
    )
    op.create_index(
        op.f("ix__password_reset_tokens__token_hash"),
        "password_reset_tokens",
        ["token_hash"],
        unique=True,
    )
    op.create_index(
        op.f("ix__password_reset_tokens__user_id"),
        "password_reset_tokens",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "plants",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=True),
        sa.Column("nickname", sa.String(), nullable=True),
        sa.Column("location_text", sa.String(), nullable=True),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column("acquisition_date", sa.DateTime(), nullable=True),
        sa.Column("light_conditions", sa.String(), nullable=True),
        sa.Column("soil_type", sa.String(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.Column(
            "ai_metrics_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "latitude BETWEEN -90 AND 90", name=op.f("ck__plants__ck_plants_lat_range")
        ),
        sa.CheckConstraint(
            "longitude BETWEEN -180 AND 180",
            name=op.f("ck__plants__ck_plants_lon_range"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk__plants__species_id__species"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__plants__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__plants")),
    )
    op.create_index("ix_plants_user_id", "plants", ["user_id"], unique=False)
    op.create_table(
        "refresh_tokens",
        sa.Column("jti", sa.String(length=64), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("revoked_at", sa.DateTime(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__refresh_tokens__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("jti", name=op.f("pk__refresh_tokens")),
    )
    op.create_index(
        op.f("ix__refresh_tokens__user_id"), "refresh_tokens", ["user_id"], unique=False
    )
    op.create_table(
        "care_plans",
        sa.Column("plant_id", sa.Integer(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("generated_by", sa.String(length=100), nullable=True),
        sa.Column(
            "inputs_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("plan_markdown", sa.String(), nullable=False),
        sa.Column("valid_from", sa.Date(), nullable=True),
        sa.Column("valid_to", sa.Date(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name=op.f("fk__care_plans__plant_id__plants"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__care_plans")),
    )
    op.create_index("ix_care_plans_plant_id", "care_plans", ["plant_id"], unique=False)
    op.create_table(
        "conversation_sessions",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("plant_id", sa.Integer(), nullable=True),
        sa.Column("source", sa.String(length=30), nullable=True),
        sa.Column("locale", sa.String(length=12), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("ended_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name=op.f("fk__conversation_sessions__plant_id__plants"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__conversation_sessions__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__conversation_sessions")),
    )
    op.create_index(
        "ix_conversation_sessions_user_id",
        "conversation_sessions",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "diagnosis_sessions",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("plant_id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("status", sa.String(length=30), nullable=True),
        sa.Column("model", sa.String(length=100), nullable=True),
        sa.Column("cost_usd", sa.Numeric(precision=10, scale=4), nullable=True),
        sa.Column("latency_ms", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name=op.f("fk__diagnosis_sessions__plant_id__plants"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__diagnosis_sessions__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__diagnosis_sessions")),
    )
    op.create_index(
        "ix_diagnosis_sessions_user_id", "diagnosis_sessions", ["user_id"], unique=False
    )
    op.create_table(
        "identification_sessions",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("plant_id", sa.Integer(), nullable=True),
        sa.Column("prompt_text", sa.String(), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("model", sa.String(length=100), nullable=True),
        sa.Column("cost_usd", sa.Numeric(precision=10, scale=4), nullable=True),
        sa.Column("latency_ms", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name=op.f("fk__identification_sessions__plant_id__plants"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__identification_sessions__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__identification_sessions")),
    )
    op.create_index(
        "ix_identification_sessions_user_id",
        "identification_sessions",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "plant_photos",
        sa.Column("plant_id", sa.Integer(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("taken_at", sa.DateTime(), nullable=True),
        sa.Column("caption", sa.String(), nullable=True),
        sa.Column(
            "ai_metrics_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name=op.f("fk__plant_photos__plant_id__plants"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__plant_photos")),
    )
    op.create_index(
        op.f("ix__plant_photos__plant_id"), "plant_photos", ["plant_id"], unique=False
    )
    op.create_table(
        "plant_shares",
        sa.Column("plant_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name=op.f("fk__plant_shares__plant_id__plants"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__plant_shares__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("plant_id", "user_id", name=op.f("pk__plant_shares")),
    )
    op.create_table(
        "reminders",
        sa.Column("plant_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("task_type", sa.String(length=30), nullable=False),
        sa.Column("priority", sa.String(length=10), nullable=False),
        sa.Column("next_due_date", sa.DateTime(), nullable=False),
        sa.Column("is_recurring", sa.Boolean(), nullable=False),
        sa.Column("cron_expression", sa.String(length=100), nullable=True),
        sa.Column("is_completed", sa.Boolean(), nullable=False),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("channel", sa.String(length=30), nullable=False),
        sa.Column("timezone", sa.String(length=64), nullable=True),
        sa.Column(
            "schedule_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plant_id"],
            ["plants.id"],
            name=op.f("fk__reminders__plant_id__plants"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__reminders__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__reminders")),
    )
    op.create_index("ix_reminders_plant_id", "reminders", ["plant_id"], unique=False)
    op.create_table(
        "care_task_templates",
        sa.Column("care_plan_id", sa.Integer(), nullable=False),
        sa.Column("task_type", sa.String(length=30), nullable=False),
        sa.Column("cadence_days", sa.Integer(), nullable=True),
        sa.Column("cron", sa.String(length=120), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["care_plan_id"],
            ["care_plans.id"],
            name=op.f("fk__care_task_templates__care_plan_id__care_plans"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__care_task_templates")),
    )
    op.create_index(
        op.f("ix__care_task_templates__care_plan_id"),
        "care_task_templates",
        ["care_plan_id"],
        unique=False,
    )
    op.create_table(
        "chat_messages",
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column("content_text", sa.String(), nullable=False),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("model", sa.String(), nullable=True),
        sa.Column("token_prompt", sa.Integer(), nullable=True),
        sa.Column("token_completion", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["conversation_sessions.id"],
            name=op.f("fk__chat_messages__session_id__conversation_sessions"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__chat_messages")),
    )
    op.create_index(
        op.f("ix__chat_messages__session_id"),
        "chat_messages",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "diagnosis_assets",
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["diagnosis_sessions.id"],
            name=op.f("fk__diagnosis_assets__session_id__diagnosis_sessions"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__diagnosis_assets")),
    )
    op.create_index(
        op.f("ix__diagnosis_assets__session_id"),
        "diagnosis_assets",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "diagnosis_candidates",
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("issue_code", sa.String(), nullable=True),
        sa.Column("label_text", sa.String(), nullable=False),
        sa.Column("confidence", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column("remedies_markdown", sa.String(), nullable=True),
        sa.Column("expected_timeline_days", sa.Integer(), nullable=True),
        sa.Column("rank", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["issue_code"],
            ["issue_catalog.code"],
            name=op.f("fk__diagnosis_candidates__issue_code__issue_catalog"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["diagnosis_sessions.id"],
            name=op.f("fk__diagnosis_candidates__session_id__diagnosis_sessions"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__diagnosis_candidates")),
    )
    op.create_index(
        op.f("ix__diagnosis_candidates__session_id"),
        "diagnosis_candidates",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "identification_assets",
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("width", sa.Integer(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column("exif_json", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["identification_sessions.id"],
            name=op.f("fk__identification_assets__session_id__identification_sessions"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__identification_assets")),
    )
    op.create_index(
        op.f("ix__identification_assets__session_id"),
        "identification_assets",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "identification_candidates",
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=True),
        sa.Column("label_text", sa.String(), nullable=False),
        sa.Column("confidence", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column("rationale_text", sa.String(), nullable=True),
        sa.Column("rank", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["identification_sessions.id"],
            name=op.f(
                "fk__identification_candidates__session_id__identification_sessions"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk__identification_candidates__species_id__species"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__identification_candidates")),
    )
    op.create_index(
        op.f("ix__identification_candidates__session_id"),
        "identification_candidates",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "reminder_logs",
        sa.Column("reminder_id", sa.Integer(), nullable=False),
        sa.Column("sent_at", sa.DateTime(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=True),
        sa.Column("error", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["reminder_id"],
            ["reminders.id"],
            name=op.f("fk__reminder_logs__reminder_id__reminders"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__reminder_logs")),
    )
    op.create_index(
        op.f("ix__reminder_logs__reminder_id"),
        "reminder_logs",
        ["reminder_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix__reminder_logs__reminder_id"), table_name="reminder_logs")
    op.drop_table("reminder_logs")
    op.drop_index(
        op.f("ix__identification_candidates__session_id"),
        table_name="identification_candidates",
    )
    op.drop_table("identification_candidates")
    op.drop_index(
        op.f("ix__identification_assets__session_id"),
        table_name="identification_assets",
    )
    op.drop_table("identification_assets")
    op.drop_index(
        op.f("ix__diagnosis_candidates__session_id"), table_name="diagnosis_candidates"
    )
    op.drop_table("diagnosis_candidates")
    op.drop_index(
        op.f("ix__diagnosis_assets__session_id"), table_name="diagnosis_assets"
    )
    op.drop_table("diagnosis_assets")
    op.drop_index(op.f("ix__chat_messages__session_id"), table_name="chat_messages")
    op.drop_table("chat_messages")
    op.drop_index(
        op.f("ix__care_task_templates__care_plan_id"), table_name="care_task_templates"
    )
    op.drop_table("care_task_templates")
    op.drop_index("ix_reminders_plant_id", table_name="reminders")
    op.drop_table("reminders")
    op.drop_table("plant_shares")
    op.drop_index(op.f("ix__plant_photos__plant_id"), table_name="plant_photos")
    op.drop_table("plant_photos")
    op.drop_index(
        "ix_identification_sessions_user_id", table_name="identification_sessions"
    )
    op.drop_table("identification_sessions")
    op.drop_index("ix_diagnosis_sessions_user_id", table_name="diagnosis_sessions")
    op.drop_table("diagnosis_sessions")
    op.drop_index(
        "ix_conversation_sessions_user_id", table_name="conversation_sessions"
    )
    op.drop_table("conversation_sessions")
    op.drop_index("ix_care_plans_plant_id", table_name="care_plans")
    op.drop_table("care_plans")
    op.drop_index(op.f("ix__refresh_tokens__user_id"), table_name="refresh_tokens")
    op.drop_table("refresh_tokens")
    op.drop_index("ix_plants_user_id", table_name="plants")
    op.drop_table("plants")
    op.drop_index(
        op.f("ix__password_reset_tokens__user_id"), table_name="password_reset_tokens"
    )
    op.drop_index(
        op.f("ix__password_reset_tokens__token_hash"),
        table_name="password_reset_tokens",
    )
    op.drop_table("password_reset_tokens")
    op.drop_table("password_credentials")
    op.drop_index(op.f("ix__oauth_accounts__user_id"), table_name="oauth_accounts")
    op.drop_table("oauth_accounts")
    op.drop_index("ix_feedback_user_id", table_name="feedback")
    op.drop_table("feedback")
    op.drop_table("audit_consent_logs")
    op.drop_index("ix_vector_items_collection", table_name="vector_items")
    op.drop_table("vector_items")
    op.drop_index(op.f("ix__users__email"), table_name="users")
    op.drop_table("users")
    op.drop_index("ix_species_common_name", table_name="species")
    op.drop_index(op.f("ix__species__scientific_name"), table_name="species")
    op.drop_index(op.f("ix__species__common_name"), table_name="species")
    op.drop_table("species")
    op.drop_table("issue_catalog")
    # ### end Alembic commands ###
